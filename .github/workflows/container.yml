name: Conatiner Build and Release

on:
  workflow_call:
    inputs:
      version:
        description: "Semantic version of the image"
        type: string
        required: true

      container-file:
        description: "Path to the Dockerfile"
        type: string
        default: "Dockerfile"
      
      sign:
        description: "Sign the image"
        type: string
        default: "true"

      publish:
        description: "Publish the image to the registry"
        type: string
        default: "true"

      sbom:
        description: "Generate and upload SBOM"
        type: string
        default: "true"
      
      scanning:
        description: "Scan the image"
        type: string
        default: "true"
      
      scanning-block:
        description: "Block the build if vulnerabilities are found"
        type: string
        default: "false"

      tags:
        description: "Comma-separated list of tags"
        type: string
        default: "latest"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SBOM_PATH: sbom

permissions:
  # to upload SBOM
  id-token: write
  contents: write
  # to upload Docker image
  packages: write

jobs:
  build-publish-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # latest / main
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            # SemVer 
            type=semver,pattern={{version}},value=${{ inputs.semver }}
            # SemVer, major only
            type=semver,pattern=v{{major}},value=${{ inputs.semver }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          file: "${{ inputs.docker-file }}"
          context: .
          push: ${{ inputs.publish }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}XW
          # SBOM Settings
          sbom: true
          outputs: |
            type=local,dest=${{ env.SBOM_PATH }}

      # Upload Software Bill of Materials (SBOM) to GitHub
      - name: Upload SBOM
        uses: advanced-security/spdx-dependency-submission-action@v0.0.1
        if: ${{ inputs.sbom == 'true' }}
        with:
          filePath: ${{ env.SBOM_PATH }}

  scanning:
    runs-on: ubuntu-latest
    needs: build-publish-image
    # Scan the image only if it is being published
    if: ${{ inputs.scanning == 'true' && inputs.publish == 'true' }}
    steps:
      # Scan the image for vulnerabilities
      - name: Run the Anchore Grype scan action
        uses: anchore/scan-action@3343887d815d7b07465f6fdcd395bd66508d486a
        id: scan
        with:
          image: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          fail-build: ${{ inputs.scanning-block }}

      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  signing:
    runs-on: ubuntu-latest
    needs: build-publish-image
    # Sign the image only if it is being published
    if: ${{ inputs.sign == 'true' && inputs.publish == 'true'  }}
    steps:
      - uses: sigstore/cosign-installer@v3.3.0
        with:
          cosign-release: 'v2.2.2'

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign the published container
        # This step uses the identity token to provision an ephemeral certificate against the sigstore community Fulcio instance.
        run: |
          cosign sign --yes \
            ${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
  